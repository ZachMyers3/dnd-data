# generated by datamodel-codegen:
#   filename:  spells.json
#   timestamp: 2021-03-24T19:19:22+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, conint

from .PyObjectId import PyObjectId
from bson import ObjectId


class Dependencies(BaseModel):
    monster: Optional[List[str]] = None


class OtherSources(BaseModel):
    monster: Optional[Dict[str, Any]] = Field(
        None,
        description="Keys are other sources to be loaded; values are `otherSources` sources from that source to search for.",
    )


class MetaBlock(BaseModel):
    dependencies: Optional[Dependencies] = None
    otherSources: Optional[OtherSources] = None


class OtherSources1Item(BaseModel):
    source: str
    page: Optional[int] = None


class OtherSources1(BaseModel):
    __root__: List[OtherSources1Item]


class AdditionalSource(BaseModel):
    source: str
    page: Optional[int] = None


class AdditionalSources(BaseModel):
    __root__: List[AdditionalSource]


class FromEnum(Enum):
    abyssal = "abyssal"
    celestial = "celestial"
    deep_speech = "deep speech"
    draconic = "draconic"
    infernal = "infernal"
    primordial = "primordial"
    sylvan = "sylvan"
    undercommon = "undercommon"
    dwarvish = "dwarvish"
    elvish = "elvish"
    giant = "giant"
    goblin = "goblin"
    other = "other"


class Choose(BaseModel):
    from_: Optional[List[FromEnum]] = Field(None, alias="from")
    count: Optional[int] = None


class LanguageProficiency(BaseModel):
    choose: Optional[Choose] = None
    any: Optional[int] = None
    anyStandard: Optional[int] = None
    abyssal: Optional[bool] = None
    celestial: Optional[bool] = None
    deep_speech: Optional[bool] = Field(None, alias="deep speech")
    draconic: Optional[bool] = None
    infernal: Optional[bool] = None
    primordial: Optional[bool] = None
    sylvan: Optional[bool] = None
    undercommon: Optional[bool] = None
    dwarvish: Optional[bool] = None
    elvish: Optional[bool] = None
    giant: Optional[bool] = None
    other: Optional[bool] = None


class LanguageProficiencies(BaseModel):
    __root__: List[LanguageProficiency]


class FromEnum1(Enum):
    artisan_s_tools = "artisan's tools"
    cartographer_s_tools = "cartographer's tools"
    disguise_kit = "disguise kit"
    forgery_kit = "forgery kit"
    gaming_set = "gaming set"
    herbalism_kit = "herbalism kit"
    musical_instrument = "musical instrument"
    navigator_s_tools = "navigator's tools"
    thieves__tools = "thieves' tools"
    vehicles__land_ = "vehicles (land)"
    vehicles__water_ = "vehicles (water)"
    alchemist_s_supplies = "alchemist's supplies"


class Choose1(BaseModel):
    from_: Optional[List[FromEnum1]] = Field(None, alias="from")
    count: Optional[int] = None


class ToolProficiency(BaseModel):
    artisan_s_tools: Optional[bool] = Field(None, alias="artisan's tools")
    cartographer_s_tools: Optional[bool] = Field(None, alias="cartographer's tools")
    disguise_kit: Optional[bool] = Field(None, alias="disguise kit")
    forgery_kit: Optional[bool] = Field(None, alias="forgery kit")
    gaming_set: Optional[bool] = Field(None, alias="gaming set")
    herbalism_kit: Optional[bool] = Field(None, alias="herbalism kit")
    musical_instrument: Optional[bool] = Field(None, alias="musical instrument")
    navigator_s_tools: Optional[bool] = Field(None, alias="navigator's tools")
    thieves__tools: Optional[bool] = Field(None, alias="thieves' tools")
    vehicles__land_: Optional[bool] = Field(None, alias="vehicles (land)")
    vehicles__water_: Optional[bool] = Field(None, alias="vehicles (water)")
    any: Optional[int] = None
    choose: Optional[Choose1] = None


class ToolProficiencies(BaseModel):
    __root__: List[ToolProficiency]


class FromItem(BaseModel):
    tool: Optional[List[str]] = None


class FromItem1(BaseModel):
    tool: Optional[bool] = None


class Choose2(BaseModel):
    from_: Optional[List[Union[Any, FromItem, FromItem1]]] = Field(None, alias="from")


class SkillProficiency(BaseModel):
    athletics: Optional[bool] = None
    acrobatics: Optional[bool] = None
    sleight_of_hand: Optional[bool] = Field(None, alias="sleight of hand")
    stealth: Optional[bool] = None
    arcana: Optional[bool] = None
    history: Optional[bool] = None
    investigation: Optional[bool] = None
    nature: Optional[bool] = None
    religion: Optional[bool] = None
    animal_handling: Optional[bool] = Field(None, alias="animal handling")
    insight: Optional[bool] = None
    medicine: Optional[bool] = None
    perception: Optional[bool] = None
    survival: Optional[bool] = None
    deception: Optional[bool] = None
    intimidation: Optional[bool] = None
    performance: Optional[bool] = None
    persuasion: Optional[bool] = None
    tool: Optional[bool] = None
    choose: Optional[Choose2] = None


class SkillProficiencies(BaseModel):
    __root__: List[SkillProficiency]


class Choose3(BaseModel):
    from_: Optional[str] = Field(
        None,
        alias="from",
        description='A filter string, e.g. "type=martial weapon|miscellaneous=mundane"',
    )
    count: Optional[int] = None


class WeaponProficiency(BaseModel):
    simple: Optional[bool] = None
    martial: Optional[bool] = None
    firearms: Optional[bool] = None
    battleaxe_phb: Optional[bool] = Field(None, alias="battleaxe|phb")
    club_phb: Optional[bool] = Field(None, alias="club|phb")
    dagger_phb: Optional[bool] = Field(None, alias="dagger|phb")
    flail_phb: Optional[bool] = Field(None, alias="flail|phb")
    glaive_phb: Optional[bool] = Field(None, alias="glaive|phb")
    greataxe_phb: Optional[bool] = Field(None, alias="greataxe|phb")
    greatclub_phb: Optional[bool] = Field(None, alias="greatclub|phb")
    greatsword_phb: Optional[bool] = Field(None, alias="greatsword|phb")
    halberd_phb: Optional[bool] = Field(None, alias="halberd|phb")
    handaxe_phb: Optional[bool] = Field(None, alias="handaxe|phb")
    javelin_phb: Optional[bool] = Field(None, alias="javelin|phb")
    lance_phb: Optional[bool] = Field(None, alias="lance|phb")
    light_hammer_phb: Optional[bool] = Field(None, alias="light hammer|phb")
    longsword_phb: Optional[bool] = Field(None, alias="longsword|phb")
    mace_phb: Optional[bool] = Field(None, alias="mace|phb")
    maul_phb: Optional[bool] = Field(None, alias="maul|phb")
    morningstar_phb: Optional[bool] = Field(None, alias="morningstar|phb")
    pike_phb: Optional[bool] = Field(None, alias="pike|phb")
    quarterstaff_phb: Optional[bool] = Field(None, alias="quarterstaff|phb")
    rapier_phb: Optional[bool] = Field(None, alias="rapier|phb")
    scimitar_phb: Optional[bool] = Field(None, alias="scimitar|phb")
    shortsword_phb: Optional[bool] = Field(None, alias="shortsword|phb")
    sickle_phb: Optional[bool] = Field(None, alias="sickle|phb")
    spear_phb: Optional[bool] = Field(None, alias="spear|phb")
    staff_phb: Optional[bool] = Field(None, alias="staff|phb")
    trident_phb: Optional[bool] = Field(None, alias="trident|phb")
    war_pick_phb: Optional[bool] = Field(None, alias="war pick|phb")
    warhammer_phb: Optional[bool] = Field(None, alias="warhammer|phb")
    whip_phb: Optional[bool] = Field(None, alias="whip|phb")
    blowgun_phb: Optional[bool] = Field(None, alias="blowgun|phb")
    dart_phb: Optional[bool] = Field(None, alias="dart|phb")
    hand_crossbow_phb: Optional[bool] = Field(None, alias="hand crossbow|phb")
    heavy_crossbow_phb: Optional[bool] = Field(None, alias="heavy crossbow|phb")
    light_crossbow_phb: Optional[bool] = Field(None, alias="light crossbow|phb")
    longbow_phb: Optional[bool] = Field(None, alias="longbow|phb")
    net_phb: Optional[bool] = Field(None, alias="net|phb")
    shortbow_phb: Optional[bool] = Field(None, alias="shortbow|phb")
    sling_phb: Optional[bool] = Field(None, alias="sling|phb")
    double_bladed_scimitar_erlw: Optional[bool] = Field(
        None, alias="double-bladed scimitar|erlw"
    )
    choose: Optional[Choose3] = None


class WeaponProficiencies(BaseModel):
    __root__: List[WeaponProficiency]


class ArmorProficiency(BaseModel):
    light: Optional[bool] = None
    medium: Optional[bool] = None
    heavy: Optional[bool] = None
    shield_phb: Optional[bool] = Field(None, alias="shield|phb")


class ArmorProficiencies(BaseModel):
    __root__: List[ArmorProficiency]


class _SpeedValItem(BaseModel):
    number: int
    condition: str


class _SpeedVal(BaseModel):
    __root__: Union[_SpeedValItem, int]


class FromEnum2(Enum):
    walk = "walk"
    burrow = "burrow"
    climb = "climb"
    fly = "fly"
    swim = "swim"


class Choose4(BaseModel):
    from_: List[FromEnum2] = Field(..., alias="from")
    amount: int
    note: Optional[str] = None


class Alternate(BaseModel):
    walk: Optional[List[_SpeedVal]] = None
    burrow: Optional[List[_SpeedVal]] = None
    climb: Optional[List[_SpeedVal]] = None
    fly: Optional[List[_SpeedVal]] = None
    swim: Optional[List[_SpeedVal]] = None


class SpeedItem(BaseModel):
    walk: Optional[_SpeedVal] = None
    burrow: Optional[_SpeedVal] = None
    climb: Optional[_SpeedVal] = None
    fly: Optional[_SpeedVal] = None
    canHover: Optional[bool] = None
    swim: Optional[_SpeedVal] = None
    choose: Optional[Choose4] = None
    alternate: Optional[Alternate] = None


class Speed(BaseModel):
    __root__: Union[SpeedItem, int, Any]


class Class(BaseModel):
    name: str
    source: Optional[str] = None
    visible: Optional[bool] = Field(
        None,
        description="Governs whether or not the class name is visible in the list display/prerequisite line. *Not* recommended for features which implicitly carry a class restriction, such as Eldritch Invocations.",
    )


class Subclass(BaseModel):
    name: str
    source: Optional[str] = None
    visible: Optional[bool] = Field(
        None,
        description="Governs whether or not the class name is visible in the list display/prerequisite line. *Not* recommended for features which implicitly carry a class restriction, such as Eldritch Invocations.",
    )


class LevelItem(BaseModel):
    level: int
    class_: Optional[Class] = Field(None, alias="class")
    subclass: Optional[Subclass] = None


class Pact(Enum):
    Chain = "Chain"
    Tome = "Tome"
    Blade = "Blade"
    Talisman = "Talisman"


class Patron(Enum):
    The_Archfey = "The Archfey"
    The_Fiend = "The Fiend"
    The_Great_Old_One = "The Great Old One"
    The_Hexblade = "The Hexblade"
    The_Raven_Queen = "The Raven Queen"
    The_Seeker = "The Seeker"


class OtherSummary(BaseModel):
    entry: str
    entrySummary: str = Field(..., description="Used in short/list displays")


class RaceItem(BaseModel):
    name: str
    displayEntry: Optional[str] = Field(
        None, description="Optional long-form name to be used in the rendered entity."
    )
    subrace: Optional[str] = None


class AbilityItem(BaseModel):
    str: Optional[int] = None
    dex: Optional[int] = None
    con: Optional[int] = None
    int: Optional[int] = None
    wis: Optional[int] = None
    cha: Optional[int] = None


class Armor(Enum):
    light = "light"
    medium = "medium"
    heavy = "heavy"


class Weapon(Enum):
    simple = "simple"
    martial = "martial"


class ProficiencyItem(BaseModel):
    armor: Optional[Armor] = None
    weapon: Optional[Weapon] = None


class _ArrayOfString(BaseModel):
    __root__: List[str]


class MediaHrefItem(BaseModel):
    type: Optional[Any] = None
    path: str


class MediaHrefItem1(BaseModel):
    type: Optional[Any] = None
    url: str


class MediaHref(BaseModel):
    __root__: Union[MediaHrefItem, MediaHrefItem1]


class Entry1(BaseModel):
    name: Optional[str] = None
    type: str
    source: Optional[str] = None
    data: Optional[Dict[str, Any]] = Field(
        None,
        description='A generic object for storing special data for external use-cases. Keys prefixed with "rd-" should be added as "data-" HTML attributes when rendering to HTML.',
    )
    page: Optional[int] = None
    id: Optional[str] = None


class RollItem(BaseModel):
    min: int
    max: int
    pad: Optional[bool] = None


class RollItem1(BaseModel):
    exact: int
    pad: Optional[bool] = None


class EntryBonus(Entry1):
    type: Optional[Any] = None
    value: int


class EntryBonusSpeed(Entry1):
    type: Optional[Any] = None
    value: int


class ToRollItem(BaseModel):
    number: int
    faces: int
    modifier: Optional[int] = Field(None, description="(Warning: unused)")
    hideModifier: Optional[bool] = Field(None, description="(Warning: unused)")


class EntryDice(Entry1):
    type: Optional[Any] = None
    toRoll: Optional[List[ToRollItem]] = None
    rollable: Optional[bool] = None


class Attribute(Enum):
    str = "str"
    dex = "dex"
    con = "con"
    int = "int"
    wis = "wis"
    cha = "cha"
    spellcasting = "spellcasting"


class EntryAbilityDc(Entry1):
    type: Optional[Any] = None
    name: str
    attributes: List[Attribute]


class Attribute1(Enum):
    str = "str"
    dex = "dex"
    con = "con"
    int = "int"
    wis = "wis"
    cha = "cha"
    spellcasting = "spellcasting"


class EntryAbilityAttackMod(Entry1):
    type: Optional[Any] = None
    name: str
    attributes: List[Attribute1]


class Attribute2(Enum):
    str = "str"
    dex = "dex"
    con = "con"
    int = "int"
    wis = "wis"
    cha = "cha"


class AbilityGeneric(Entry1):
    type: Optional[Any] = None
    name: Optional[str] = None
    text: str
    attributes: Optional[List[Attribute2]] = None


class Subhash(BaseModel):
    key: str
    values: List[str]
    preEncoded: Optional[bool] = None


class Subhash1(BaseModel):
    key: str
    value: str
    preEncoded: Optional[bool] = None


class Hover(BaseModel):
    page: str
    source: str
    hash: Optional[str] = Field(
        None, description="Optional; overrides the href hash for hover handlers."
    )
    hashPreEncoded: Optional[bool] = None


class HrefItem(BaseModel):
    type: Optional[Any] = None
    path: str
    hash: Optional[str] = None
    hashPreEncoded: Optional[bool] = None
    subhashes: Optional[List[Union[Subhash, Subhash1]]] = None
    hover: Optional[Hover] = None


class HrefItem1(BaseModel):
    type: Optional[Any] = None
    url: str


class EntryLink(Entry1):
    type: Optional[Any] = None
    text: str
    href: Union[HrefItem, HrefItem1]


class EntryOptFeature(Entry1):
    name: str
    type: Optional[Any] = None
    prerequisite: Optional[str] = None


class VariantSource(BaseModel):
    source: str
    page: int


class EntryItem(Entry1):
    pass


class ImageType(Enum):
    map = "map"


class MapRegion(BaseModel):
    area: Optional[str] = None
    points: Optional[List[List[int]]] = None


class Style(Enum):
    comic_speaker_left = "comic-speaker-left"
    comic_speaker_right = "comic-speaker-right"


class EntryImage(Entry1):
    type: Optional[Any] = None
    href: MediaHref
    hrefThumbnail: Optional[MediaHref] = Field(
        None,
        title="A thumbnail image used in rare cases, e.g. when loading a wall of maps to choose from in the DM Screen.",
    )
    title: Optional[str] = None
    altText: Optional[str] = Field(None, description="For accessibility purposes")
    imageType: Optional[ImageType] = None
    mapRegions: Optional[List[MapRegion]] = None
    width: Optional[int] = None
    height: Optional[int] = None
    maxWidth: Optional[int] = Field(
        None,
        description='Specify the max desired display width of the images, as opposed to "width" which should only be used for the _real_ width. Assumes pixels by default.',
    )
    maxHeight: Optional[int] = Field(None, description='As per "maxWidth"')
    maxWidthUnits: Optional[str] = None
    maxHeightUnits: Optional[str] = None
    style: Optional[Style] = None


class EntryGallery(Entry1):
    type: Optional[Any] = None
    images: List[EntryImage]


class AttackType(Enum):
    MW = "MW"
    RW = "RW"


class EntryFlowchart(Entry1):
    type: Any
    blocks: List[Entry1]


class EntryFlowBlock(Entry1):
    type: Any
    entries: Optional[List[Entry1]] = None
    name: Optional[str] = None


class Creature(BaseModel):
    __root__: Union[Dict[str, Any], Dict[str, Any]]


class AlignItem1(BaseModel):
    special: str


class AcItemItem(BaseModel):
    ac: int
    from_: Optional[List[str]] = Field(None, alias="from")
    condition: Optional[str] = None
    braces: Optional[bool] = None


class AcItemItem1(BaseModel):
    special: str


class AcItem(BaseModel):
    __root__: Union[AcItemItem, AcItemItem1, int]


class Size(Enum):
    F = "F"
    D = "D"
    T = "T"
    S = "S"
    M = "M"
    L = "L"
    H = "H"
    G = "G"
    C = "C"
    V = "V"


class SwarmSize(Enum):
    F = "F"
    D = "D"
    T = "T"
    S = "S"
    M = "M"
    L = "L"
    H = "H"
    G = "G"
    C = "C"
    V = "V"


class Tag(BaseModel):
    tag: str
    prefix: str


class HpItem(BaseModel):
    average: Optional[int] = None
    formula: Optional[str] = None


class HpItem1(BaseModel):
    special: Optional[str] = None


class OneOf(BaseModel):
    acrobatics: Optional[str] = None
    animal_handling: Optional[str] = Field(None, alias="animal handling")
    arcana: Optional[str] = None
    athletics: Optional[str] = None
    deception: Optional[str] = None
    history: Optional[str] = None
    insight: Optional[str] = None
    intimidation: Optional[str] = None
    investigation: Optional[str] = None
    medicine: Optional[str] = None
    nature: Optional[str] = None
    perception: Optional[str] = None
    performance: Optional[str] = None
    persuasion: Optional[str] = None
    religion: Optional[str] = None
    sleight_of_hand: Optional[str] = Field(None, alias="sleight of hand")
    stealth: Optional[str] = None
    survival: Optional[str] = None


class OtherItem(BaseModel):
    oneOf: Optional[OneOf] = None


class CrItem(BaseModel):
    cr: str
    lair: Optional[str] = None
    coven: Optional[str] = None
    xp: Optional[int] = None


class LegendaryGroup(BaseModel):
    name: Optional[str] = None
    source: Optional[str] = None


class Token(BaseModel):
    name: str
    source: str
    page: Optional[int] = None


class VariantSource1(BaseModel):
    source: Optional[str] = None
    page: Optional[int] = None


class AltArtItem(BaseModel):
    name: str
    source: str
    page: Optional[int] = None


class _MonsterFluff(BaseModel):
    name: Optional[str] = None
    source: Optional[str] = None


class _AppendMonsterFluff(BaseModel):
    name: Optional[str] = None
    source: Optional[str] = None


class FluffItem(BaseModel):
    _monsterFluff: Optional[_MonsterFluff] = None
    _appendMonsterFluff: Optional[_AppendMonsterFluff] = None


class EnvironmentEnum(Enum):
    underwater = "underwater"
    coastal = "coastal"
    mountain = "mountain"
    grassland = "grassland"
    hill = "hill"
    arctic = "arctic"
    urban = "urban"
    forest = "forest"
    swamp = "swamp"
    underdark = "underdark"
    desert = "desert"


class DragonCastingColor(Enum):
    B = "B"
    U = "U"
    G = "G"
    R = "R"
    W = "W"
    A = "A"
    Z = "Z"
    C = "C"
    O = "O"
    S = "S"


class TraitTag(Enum):
    Aggressive = "Aggressive"
    Ambusher = "Ambusher"
    Amorphous = "Amorphous"
    Amphibious = "Amphibious"
    Antimagic_Susceptibility = "Antimagic Susceptibility"
    Brute = "Brute"
    Charge = "Charge"
    Damage_Absorption = "Damage Absorption"
    Death_Burst = "Death Burst"
    Devil_s_Sight = "Devil's Sight"
    False_Appearance = "False Appearance"
    Fey_Ancestry = "Fey Ancestry"
    Flyby = "Flyby"
    Hold_Breath = "Hold Breath"
    Illumination = "Illumination"
    Immutable_Form = "Immutable Form"
    Incorporeal_Movement = "Incorporeal Movement"
    Keen_Senses = "Keen Senses"
    Legendary_Resistances = "Legendary Resistances"
    Light_Sensitivity = "Light Sensitivity"
    Magic_Resistance = "Magic Resistance"
    Magic_Weapons = "Magic Weapons"
    Pack_Tactics = "Pack Tactics"
    Pounce = "Pounce"
    Rampage = "Rampage"
    Reckless = "Reckless"
    Regeneration = "Regeneration"
    Rejuvenation = "Rejuvenation"
    Shapechanger = "Shapechanger"
    Siege_Monster = "Siege Monster"
    Sneak_Attack = "Sneak Attack"
    Spell_Immunity = "Spell Immunity"
    Spider_Climb = "Spider Climb"
    Sunlight_Sensitivity = "Sunlight Sensitivity"
    Turn_Immunity = "Turn Immunity"
    Turn_Resistance = "Turn Resistance"
    Undead_Fortitude = "Undead Fortitude"
    Water_Breathing = "Water Breathing"
    Web_Sense = "Web Sense"
    Web_Walker = "Web Walker"


class ActionTag(Enum):
    Frightful_Presence = "Frightful Presence"
    Multiattack = "Multiattack"
    Parry = "Parry"
    Swallow = "Swallow"
    Teleport = "Teleport"
    Tentacles = "Tentacles"


class LanguageTag(Enum):
    AB = "AB"
    AQ = "AQ"
    AU = "AU"
    C = "C"
    CE = "CE"
    CS = "CS"
    D = "D"
    DR = "DR"
    DS = "DS"
    DU = "DU"
    E = "E"
    G = "G"
    GI = "GI"
    GO = "GO"
    GTH = "GTH"
    H = "H"
    I = "I"
    IG = "IG"
    LF = "LF"
    O = "O"
    OTH = "OTH"
    P = "P"
    S = "S"
    T = "T"
    TC = "TC"
    TP = "TP"
    U = "U"
    X = "X"
    XX = "XX"


class SenseTag(Enum):
    B = "B"
    D = "D"
    SD = "SD"
    T = "T"
    U = "U"


class SpellcastingTag(Enum):
    P = "P"
    I = "I"
    F = "F"
    S = "S"
    CA = "CA"
    CB = "CB"
    CC = "CC"
    CD = "CD"
    CP = "CP"
    CR = "CR"
    CS = "CS"
    CL = "CL"
    CW = "CW"


class DamageTag(Enum):
    A = "A"
    B = "B"
    C = "C"
    F = "F"
    O = "O"
    L = "L"
    N = "N"
    P = "P"
    I = "I"
    Y = "Y"
    R = "R"
    S = "S"
    T = "T"


class MiscTag(Enum):
    MW = "MW"
    RW = "RW"
    RCH = "RCH"
    THW = "THW"
    RNG = "RNG"
    AOE = "AOE"


class CreatureType(Enum):
    aberration = "aberration"
    beast = "beast"
    celestial = "celestial"
    construct = "construct"
    dragon = "dragon"
    elemental = "elemental"
    fey = "fey"
    fiend = "fiend"
    giant = "giant"
    humanoid = "humanoid"
    monstrosity = "monstrosity"
    ooze = "ooze"
    plant = "plant"
    undead = "undead"


class DataCondition(Enum):
    blinded = "blinded"
    charmed = "charmed"
    deafened = "deafened"
    exhaustion = "exhaustion"
    frightened = "frightened"
    grappled = "grappled"
    incapacitated = "incapacitated"
    invisible = "invisible"
    paralyzed = "paralyzed"
    petrified = "petrified"
    poisoned = "poisoned"
    prone = "prone"
    restrained = "restrained"
    stunned = "stunned"
    unconscious = "unconscious"
    disease = "disease"


class DataDamageType(Enum):
    acid = "acid"
    bludgeoning = "bludgeoning"
    cold = "cold"
    fire = "fire"
    force = "force"
    lightning = "lightning"
    necrotic = "necrotic"
    piercing = "piercing"
    poison = "poison"
    psychic = "psychic"
    radiant = "radiant"
    slashing = "slashing"
    thunder = "thunder"


class DataOptionalfeatureType(Enum):
    ED = "ED"
    EI = "EI"
    MM = "MM"
    MV = "MV"
    MV_B = "MV:B"
    OTH = "OTH"
    FS_F = "FS:F"
    FS_B = "FS:B"
    FS_R = "FS:R"
    FS_P = "FS:P"
    MV_C2_UA = "MV:C2-UA"
    AS_V1_UA = "AS:V1-UA"
    AS_V2_UA = "AS:V2-UA"
    AS = "AS"
    PB = "PB"
    AI = "AI"
    SHP_H = "SHP:H"
    SHP_M = "SHP:M"
    SHP_W = "SHP:W"
    SHP_F = "SHP:F"
    SHP_O = "SHP:O"
    IWM_W = "IWM:W"
    IWM_A = "IWM:A"
    IWM_G = "IWM:G"
    OR = "OR"
    RN = "RN"
    AF = "AF"


class DamageImmunityArray(BaseModel):
    __root__: Union[List[Any], Any]


class DamageResistArray(BaseModel):
    __root__: Union[List[Any], Any]


class DamageVulnerabilityArray(BaseModel):
    __root__: Union[List[Any], Any]


class ConditionImmunityArray(BaseModel):
    __root__: Union[List[Any], Any]


class GenericFluffArray(BaseModel):
    __root__: List[Union[Dict[str, Any], Dict[str, Any]]]


class TagsCondition(Enum):
    blinded = "blinded"
    charmed = "charmed"
    deafened = "deafened"
    exhaustion = "exhaustion"
    frightened = "frightened"
    grappled = "grappled"
    incapacitated = "incapacitated"
    invisible = "invisible"
    paralyzed = "paralyzed"
    petrified = "petrified"
    poisoned = "poisoned"
    prone = "prone"
    restrained = "restrained"
    stunned = "stunned"
    unconscious = "unconscious"


class TagsConditions(BaseModel):
    __root__: List[TagsCondition]


class CopyModifierItem(BaseModel):
    mode: Optional[Any] = None
    replace: str
    with_: str = Field(..., alias="with")
    flags: Optional[str] = None


class CopyModifierItem1(BaseModel):
    mode: Optional[Any] = None
    str: str
    joiner: Optional[str] = None


class CopyModifierItem2(BaseModel):
    mode: Optional[Any] = None
    items: Union[str, Dict[str, Any], List[Any]]


class CopyModifierItem3(BaseModel):
    mode: Optional[Any] = None
    items: Union[str, Dict[str, Any], List[Any]]


class CopyModifierItem4(BaseModel):
    mode: Optional[Any] = None
    items: Union[str, Dict[str, Any], List[Any]]


class ReplaceItem(BaseModel):
    index: int


class ReplaceItem1(BaseModel):
    regex: str
    flags: Optional[str] = None


class CopyModifierItem5(BaseModel):
    mode: Optional[Any] = None
    replace: Union[str, ReplaceItem, ReplaceItem1]
    items: Union[Dict[str, Any], List[Any]]


class ReplaceItem2(BaseModel):
    index: int


class ReplaceItem3(BaseModel):
    regex: str
    flags: Optional[str] = None


class CopyModifierItem6(BaseModel):
    mode: Optional[Any] = None
    replace: Union[str, ReplaceItem2, ReplaceItem3]
    items: Union[Dict[str, Any], List[Any]]


class CopyModifierItem7(BaseModel):
    mode: Optional[Any] = None
    index: int
    items: Union[Dict[str, Any], str, List[Any]]


class CopyModifierItem8(BaseModel):
    mode: Optional[Any] = None
    names: Optional[Union[str, List[Any]]] = None
    items: Optional[Union[str, List[Any]]] = None
    force: Optional[bool] = None


class CopyModifierItem9(BaseModel):
    mode: Optional[Any] = None
    prop: str
    formula: str


class CopyModifierItem10(BaseModel):
    mode: Any
    spells: Optional[Dict[str, Any]] = None
    daily: Optional[Dict[str, Any]] = None


class CopyModifierItem11(BaseModel):
    mode: Any
    spells: Optional[Dict[str, Any]] = None
    will: Optional[List] = None
    daily: Optional[Dict[str, Any]] = None


class CopyModifierItem12(BaseModel):
    mode: Any
    skills: Dict[str, Any]


class CopyModifier(BaseModel):
    __root__: Union[
        CopyModifierItem,
        CopyModifierItem1,
        CopyModifierItem2,
        CopyModifierItem3,
        CopyModifierItem4,
        CopyModifierItem5,
        CopyModifierItem6,
        CopyModifierItem7,
        CopyModifierItem8,
        CopyModifierItem9,
        CopyModifierItem10,
        CopyModifierItem11,
        CopyModifierItem12,
    ]


class _Trait(BaseModel):
    name: str
    source: str


class _Copy(BaseModel):
    name: str
    source: str
    pantheon: Optional[str] = Field(None, description="Used in deity data")
    _mod: Optional[Dict[str, Any]] = None
    _trait: Optional[_Trait] = None
    _preserve: Optional[Dict[str, Any]] = None


class CopyBlock(BaseModel):
    _copy: _Copy


class Srd(BaseModel):
    __root__: Union[bool, str]


class _AdditionalSpellObject(BaseModel):
    pass


class _AdditionalSpellArrayOfStringOrChoiceObjectItem(BaseModel):
    choose: str
    count: Optional[int] = None


class _AdditionalSpellArrayOfStringOrChoiceObject(BaseModel):
    __root__: List[Union[str, _AdditionalSpellArrayOfStringOrChoiceObjectItem]]


class ChooseEnum(Enum):
    str = "str"
    dex = "dex"
    con = "con"
    int = "int"
    wis = "wis"
    cha = "cha"


class AbilityItem1(BaseModel):
    choose: List[ChooseEnum]


class AdditionalSpellsArrayItem(BaseModel):
    ability: Optional[Union[AbilityItem1, str]] = Field(
        None,
        description="Optionally specify the ability score used for e.g. racial spellcasting",
    )
    innate: Optional[_AdditionalSpellObject] = None
    prepared: Optional[_AdditionalSpellObject] = None
    expanded: Optional[_AdditionalSpellObject] = None


class AdditionalSpellsArray(BaseModel):
    __root__: List[AdditionalSpellsArrayItem] = Field(
        ..., description="A collection of additional spells which a feature grants."
    )


class StartingEquipment(BaseModel):
    __root__: List[Dict[str, Any]] = Field(
        ...,
        description='Optional well-structured data version of the "default" property, for use in applications that require it.',
    )


class Field0(BaseModel):
    spells: List[str]


class HiddenEnum(Enum):
    constant = "constant"
    will = "will"
    rest = "rest"
    daily = "daily"
    weekly = "weekly"
    ritual = "ritual"
    spells = "spells"


class Ability(Enum):
    str = "str"
    dex = "dex"
    con = "con"
    int = "int"
    wis = "wis"
    cha = "cha"


class Spell(BaseModel):
    __root__: Union[Dict[str, Any], Dict[str, Any]]


class School(Enum):
    A = "A"
    V = "V"
    E = "E"
    I = "I"
    D = "D"
    N = "N"
    T = "T"
    C = "C"
    P = "P"


class Meta(BaseModel):
    ritual: Optional[bool] = None
    technomagic: Optional[bool] = None


class Type(Enum):
    special = "special"
    point = "point"
    line = "line"
    cube = "cube"
    cone = "cone"
    radius = "radius"
    sphere = "sphere"
    hemisphere = "hemisphere"
    cylinder = "cylinder"


class Type1(Enum):
    feet = "feet"
    miles = "miles"
    self = "self"
    touch = "touch"
    unlimited = "unlimited"
    plane = "plane"
    sight = "sight"


class TypeSecondary(Enum):
    feet = "feet"
    miles = "miles"
    self = "self"
    touch = "touch"
    unlimited = "unlimited"
    plane = "plane"
    sight = "sight"


class Distance(BaseModel):
    type: Type1
    amount: Optional[int] = None
    typeSecondary: Optional[TypeSecondary] = Field(None, description="Homebrew only")
    amountSecondary: Optional[int] = Field(None, description="Homebrew only")


class Range(BaseModel):
    type: Type
    distance: Optional[Distance] = None


class MItem(BaseModel):
    text: str
    cost: Optional[float] = Field(None, description="In copper pieces.")
    consume: Optional[Union[bool, str]] = None


class Components(BaseModel):
    v: Optional[bool] = None
    s: Optional[bool] = None
    m: Optional[Union[MItem, Union[bool, str]]] = None
    r: Optional[bool] = Field(
        None,
        description='"Royalty" components, as introduced in Acquisitions Incorporated',
    )


class Subclass1(BaseModel):
    name: str
    source: str
    subSubclass: Optional[str] = None


class Race(BaseModel):
    name: str
    source: str
    baseName: Optional[str] = None
    baseSource: Optional[str] = None


class Background(BaseModel):
    name: str
    source: str


class EldritchInvocation(BaseModel):
    name: str
    source: str


class DamageInflictEnum(Enum):
    acid = "acid"
    bludgeoning = "bludgeoning"
    cold = "cold"
    fire = "fire"
    force = "force"
    lightning = "lightning"
    necrotic = "necrotic"
    piercing = "piercing"
    poison = "poison"
    psychic = "psychic"
    radiant = "radiant"
    slashing = "slashing"
    thunder = "thunder"


class DamageResistEnum(Enum):
    acid = "acid"
    bludgeoning = "bludgeoning"
    cold = "cold"
    fire = "fire"
    force = "force"
    lightning = "lightning"
    necrotic = "necrotic"
    piercing = "piercing"
    poison = "poison"
    psychic = "psychic"
    radiant = "radiant"
    slashing = "slashing"
    thunder = "thunder"


class DamageImmuneEnum(Enum):
    acid = "acid"
    bludgeoning = "bludgeoning"
    cold = "cold"
    fire = "fire"
    force = "force"
    lightning = "lightning"
    necrotic = "necrotic"
    piercing = "piercing"
    poison = "poison"
    psychic = "psychic"
    radiant = "radiant"
    slashing = "slashing"
    thunder = "thunder"


class DamageVulnerableEnum(Enum):
    acid = "acid"
    bludgeoning = "bludgeoning"
    cold = "cold"
    fire = "fire"
    force = "force"
    lightning = "lightning"
    necrotic = "necrotic"
    piercing = "piercing"
    poison = "poison"
    psychic = "psychic"
    radiant = "radiant"
    slashing = "slashing"
    thunder = "thunder"


class SavingThrowEnum(Enum):
    strength = "strength"
    constitution = "constitution"
    dexterity = "dexterity"
    intelligence = "intelligence"
    wisdom = "wisdom"
    charisma = "charisma"


class AbilityCheckEnum(Enum):
    strength = "strength"
    constitution = "constitution"
    dexterity = "dexterity"
    intelligence = "intelligence"
    wisdom = "wisdom"
    charisma = "charisma"


class SpellAttackEnum(Enum):
    M = "M"
    R = "R"
    O = "O"


class AreaTag(Enum):
    ST = "ST"
    MT = "MT"
    R = "R"
    N = "N"
    C = "C"
    Y = "Y"
    H = "H"
    L = "L"
    S = "S"
    Q = "Q"
    W = "W"


class MiscTag1(Enum):
    PRM = "PRM"
    SCL = "SCL"
    HL = "HL"
    SMN = "SMN"
    SGT = "SGT"
    THP = "THP"
    MAC = "MAC"
    TP = "TP"
    FMV = "FMV"


class Time(BaseModel):
    number: Optional[int] = None
    unit: str
    condition: Optional[str] = None


class Type2(Enum):
    instant = "instant"
    timed = "timed"
    permanent = "permanent"
    special = "special"


class Type3(Enum):
    hour = "hour"
    minute = "minute"
    turn = "turn"
    round = "round"
    week = "week"
    day = "day"
    year = "year"


class Duration1(BaseModel):
    type: Type3
    amount: Optional[int] = None
    upTo: Optional[bool] = None


class End(Enum):
    dispel = "dispel"
    trigger = "trigger"
    discharge = "discharge"


class Duration(BaseModel):
    type: Type2
    duration: Optional[Duration1] = None
    concentration: Optional[bool] = None
    ends: Optional[List[End]] = None
    condition: Optional[str] = None


class ScalingLevelDiceItem(BaseModel):
    label: Optional[str] = None
    scaling: Optional[Dict[str, Any]] = None


class TrapHazType(Enum):
    MECH = "MECH"
    MAG = "MAG"


class TrapHazType1(Enum):
    WTH = "WTH"
    ENV = "ENV"
    WLD = "WLD"
    GEN = "GEN"
    EST = "EST"


class ObjectType(Enum):
    SW = "SW"
    GEN = "GEN"
    U = "U"


class Item(BaseModel):
    __root__: Union[Dict[str, Any], Dict[str, Any]]


class Rarity(Enum):
    rare = "rare"
    none = "none"
    uncommon = "uncommon"
    very_rare = "very rare"
    legendary = "legendary"
    artifact = "artifact"
    unknown = "unknown"
    common = "common"
    unknown__magic_ = "unknown (magic)"
    varies = "varies"


class PropertyEnum(Enum):
    T = "T"
    V = "V"
    H = "H"
    field_2H = "2H"
    F = "F"
    L = "L"
    R = "R"
    A = "A"
    LD = "LD"
    S = "S"
    AF = "AF"
    RLD = "RLD"
    BF = "BF"
    EM = "EM"
    OTH = "OTH"


class PoisonType(Enum):
    ingested = "ingested"
    injury = "injury"
    inhaled = "inhaled"
    contact = "contact"


class Recharge(Enum):
    round = "round"
    restShort = "restShort"
    restLong = "restLong"
    dawn = "dawn"
    dusk = "dusk"
    midnight = "midnight"
    special = "special"


class Ability1(BaseModel):
    choose: Optional[List] = None
    static: Optional[Dict[str, Any]] = None
    str: Optional[int] = None
    dex: Optional[int] = None
    con: Optional[int] = None
    int: Optional[int] = None
    wis: Optional[int] = None
    cha: Optional[int] = None


class PackContent(BaseModel):
    special: str
    quantity: Optional[int] = None


class PackContent1(BaseModel):
    item: str
    quantity: int


class ContainerCapacity(BaseModel):
    weight: Optional[List[int]] = None
    item: Optional[List[Dict[str, Any]]] = None
    weightless: Optional[bool] = Field(
        None, description="If the container renders its contents weightless."
    )


class EntryRefClassFeature(BaseModel):
    type: Any
    classFeature: str


class EntryRefSubclassFeature(BaseModel):
    type: Any
    subclassFeature: str


class EntryRefOptionalfeature(BaseModel):
    type: Any
    optionalfeature: str
    name: Optional[str] = None


class EntryHr(BaseModel):
    type: Any


class EntrySpellcastingLevel1to9(BaseModel):
    lower: Optional[float] = None
    slots: Optional[float] = None
    spells: List[str]


class EntrySpellcastingFrequency(BaseModel):
    field_9e: Optional[_ArrayOfString] = Field(None, alias="9e")
    field_9: Optional[_ArrayOfString] = Field(None, alias="9")
    field_8e: Optional[_ArrayOfString] = Field(None, alias="8e")
    field_8: Optional[_ArrayOfString] = Field(None, alias="8")
    field_7e: Optional[_ArrayOfString] = Field(None, alias="7e")
    field_7: Optional[_ArrayOfString] = Field(None, alias="7")
    field_6e: Optional[_ArrayOfString] = Field(None, alias="6e")
    field_6: Optional[_ArrayOfString] = Field(None, alias="6")
    field_5e: Optional[_ArrayOfString] = Field(None, alias="5e")
    field_5: Optional[_ArrayOfString] = Field(None, alias="5")
    field_4e: Optional[_ArrayOfString] = Field(None, alias="4e")
    field_4: Optional[_ArrayOfString] = Field(None, alias="4")
    field_3e: Optional[_ArrayOfString] = Field(None, alias="3e")
    field_3: Optional[_ArrayOfString] = Field(None, alias="3")
    field_2e: Optional[_ArrayOfString] = Field(None, alias="2e")
    field_2: Optional[_ArrayOfString] = Field(None, alias="2")
    field_1e: Optional[_ArrayOfString] = Field(None, alias="1e")
    field_1: Optional[_ArrayOfString] = Field(None, alias="1")


class DataDamImmuneItem(BaseModel):
    special: str


class DataCondImmuneItem(BaseModel):
    special: str


class DataCondImmuneItem1(BaseModel):
    preNote: Optional[str] = None
    conditionImmune: List[DataCondition]
    note: Optional[str] = None


class DataCondImmune(BaseModel):
    __root__: Union[DataCondition, DataCondImmuneItem, DataCondImmuneItem1]


class Spells(BaseModel):
    spell: List[Spell]
    _meta: Optional[MetaBlock] = None


class EntryDataCreature(BaseModel):
    type: Any
    dataCreature: Creature


class TypeItem(BaseModel):
    type: CreatureType
    swarmSize: Optional[SwarmSize] = None
    tags: Optional[List[Union[str, Tag]]] = None


class _AdditionalSpellRechargeObject(BaseModel):
    field_9e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="9e"
    )
    field_8e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="8e"
    )
    field_7e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="7e"
    )
    field_6e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="6e"
    )
    field_5e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="5e"
    )
    field_4e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="4e"
    )
    field_3e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="3e"
    )
    field_2e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="2e"
    )
    field_1e: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="1e"
    )
    field_9: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="9"
    )
    field_8: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="8"
    )
    field_7: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="7"
    )
    field_6: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="6"
    )
    field_5: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="5"
    )
    field_4: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="4"
    )
    field_3: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="3"
    )
    field_2: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="2"
    )
    field_1: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, alias="1"
    )


class Spells1(BaseModel):
    field_0: Optional[Field0] = Field(None, alias="0")
    field_1: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="1")
    field_2: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="2")
    field_3: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="3")
    field_4: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="4")
    field_5: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="5")
    field_6: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="6")
    field_7: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="7")
    field_8: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="8")
    field_9: Optional[EntrySpellcastingLevel1to9] = Field(None, alias="9")


class EntryDataSpell(BaseModel):
    type: Any
    dataSpell: Spell


class FromSubclas(BaseModel):
    class_: Class = Field(..., alias="class")
    subclass: Subclass1


class Classes(BaseModel):
    fromClassList: Optional[List[Class]] = None
    fromClassListVariant: Optional[List[Class]] = None
    fromSubclass: Optional[List[FromSubclas]] = None


class EntryDataItem(BaseModel):
    type: Any
    dataItem: Item


class _AdditionalSpellLevelObject(BaseModel):
    rest: Optional[_AdditionalSpellRechargeObject] = Field(
        None, description="Spells which recharge on short or long rest"
    )
    daily: Optional[_AdditionalSpellRechargeObject] = Field(
        None, description="Spells which recharge on long rest"
    )
    will: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, description="At-will spells"
    )
    ritual: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None, description="Ritual-only spells"
    )
    _: Optional[_AdditionalSpellArrayOfStringOrChoiceObject] = Field(
        None,
        description="Spells which do not fall into the above categories (i.e. have no specific recharge, and are simply known)",
    )


class PrerequisiteItem(BaseModel):
    level: Optional[Union[LevelItem, conint(ge=1)]] = None
    pact: Optional[Pact] = None
    patron: Optional[Patron] = None
    spell: Optional[List[Entry]] = None
    feature: Optional[List[Entry]] = None
    item: Optional[List[Entry]] = None
    other: Optional[str] = Field(None, description="A free text prerequisite")
    otherSummary: Optional[OtherSummary] = Field(
        None,
        description="A free text prerequisite, with a shortened form for list display.",
    )
    race: Optional[List[RaceItem]] = None
    ability: Optional[List[AbilityItem]] = None
    spellcasting: Optional[bool] = None
    spellcasting2020: Optional[bool] = Field(
        None, description="Renders with the updated text found in UA2020: Feats"
    )
    psionics: Optional[bool] = None
    proficiency: Optional[List[ProficiencyItem]] = None


class Prerequisite(BaseModel):
    __root__: List[PrerequisiteItem]


class Entry(BaseModel):
    __root__: Union[
        EntrySection,
        EntryEntries,
        EntryHomebrew,
        EntryQuote,
        EntryInlineEntries,
        EntryEntriesInlineEntries,
        EntryOptions,
        EntryTableGroup,
        EntryTable,
        EntryTableRow,
        EntryTableCell,
        EntryList,
        EntryBonus,
        EntryBonusSpeed,
        EntryDice,
        EntryAbilityDc,
        EntryAbilityAttackMod,
        AbilityGeneric,
        EntryLink,
        EntryOptFeature,
        EntryInset,
        EntryInsetReadaloud,
        EntryVariant,
        EntryVariantInner,
        EntryVariantSub,
        EntryItem,
        EntryItemSub,
        EntryItemSpell,
        EntryImage,
        EntryGallery,
        EntryActions,
        EntryAttack,
        EntryDataCreature,
        EntryDataSpell,
        EntryDataTrapHazard,
        EntryDataObject,
        EntryDataItem,
        EntryRefClassFeature,
        EntryRefSubclassFeature,
        EntryRefOptionalfeature,
        EntryHr,
        EntrySpellcasting,
        EntryFlowchart,
        EntryFlowBlock,
        EntryIngredient,
        str,
        int,
    ] = Field(..., description="A recursively renderable object.")


class EntrySection(Entry1):
    type: Optional[Any] = None
    name: Optional[str] = None
    alias: Optional[List[str]] = None
    entries: List[Entry]
    data: Optional[Dict[str, Any]] = None
    page: Optional[int] = None
    source: Optional[str] = None
    id: Optional[str] = None


class EntryEntries(Entry1):
    type: Optional[Any] = None
    name: Optional[str] = None
    alias: Optional[List[str]] = None
    entries: List[Entry]
    data: Optional[Dict[str, Any]] = None
    page: Optional[int] = None
    source: Optional[str] = None
    id: Optional[str] = None


class EntryHomebrew(Entry1):
    type: Optional[Any] = None
    name: Optional[str] = None
    entries: Optional[List[Entry]] = None
    movedTo: Optional[Entry] = None
    oldEntries: Optional[List[Entry]] = None
    data: Optional[Dict[str, Any]] = None


class EntryQuote(Entry1):
    type: Optional[Any] = None
    entries: List[Entry]
    by: Optional[str] = None
    from_: Optional[str] = Field(None, alias="from")
    skipMarks: Optional[bool] = Field(
        None,
        description="If the automatically-inserted quotation marks should be skipped.",
    )


class EntryInlineEntries(Entry1):
    type: Optional[Any] = None
    entries: List[Entry]


class EntryEntriesInlineEntries(Entry1):
    type: Optional[Any] = None
    entries: List[Entry]


class EntryOptions(Entry1):
    type: Optional[Any] = None
    count: Optional[int] = Field(
        None,
        description="Used to specify how many of the listed options can be chosen as e.g. permanent character features. Leave blank for transient choices.",
    )
    name: Optional[str] = None
    style: Optional[str] = None
    entries: List[Entry]


class EntryTable(Entry1):
    type: Optional[Any] = None
    caption: Optional[str] = None
    intro: Optional[List[Entry]] = Field(
        None, description="Primarily for homebrew use."
    )
    outro: Optional[List[Entry]] = Field(
        None, description="Primarily for homebrew use."
    )
    isStriped: Optional[bool] = None
    isNameGenerator: Optional[bool] = None
    style: Optional[str] = None
    colLabels: Optional[List[str]] = None
    colStyles: Optional[List[str]] = None
    rowLabels: Optional[List[str]] = None
    rowStyles: Optional[List[str]] = None
    rows: List[Union[List[Any], EntryTableRow]]
    footnotes: Optional[List[Entry]] = None
    data: Optional[Dict[str, Any]] = None


class EntryTableGroup(Entry1):
    type: Optional[Any] = None
    tables: Optional[List[EntryTable]] = None
    name: Optional[str] = None
    data: Optional[Dict[str, Any]] = None


class EntryTableRow(Entry1):
    type: Any
    style: Optional[str] = None
    row: List[Entry]


class EntryTableCell(Entry1):
    type: Optional[Any] = None
    width: Optional[int] = None
    roll: Optional[Union[RollItem, RollItem1]] = None
    entry: Optional[Entry] = None


class EntryList(Entry1):
    type: Optional[Any] = None
    columns: Optional[int] = Field(
        None,
        description="Number of columns the content should be split into. Note that the full value is only displayed on wide screens, and screens below certain widths will see an appropriately reduced number of columns.",
    )
    style: Optional[str] = None
    name: Optional[str] = None
    items: List[Entry]


class EntryInset(Entry1):
    type: Optional[Any] = None
    name: Optional[str] = None
    entries: List[Entry]
    data: Optional[Dict[str, Any]] = None
    page: Optional[int] = None
    source: Optional[str] = None
    id: Optional[str] = None
    style: Optional[str] = None


class EntryInsetReadaloud(Entry1):
    type: Optional[Any] = None
    entries: List[Entry]
    page: Optional[int] = None
    source: Optional[str] = None
    id: Optional[str] = None
    style: Optional[str] = None


class EntryVariant(Entry1):
    type: Optional[Any] = None
    name: str
    entries: List[Entry]
    variantSource: Optional[VariantSource] = None


class EntryVariantInner(Entry1):
    type: Optional[Any] = None
    name: str
    entries: List[Entry]


class EntryVariantSub(Entry1):
    type: Optional[Any] = None
    name: str
    entries: List[Entry]


class EntryItemSub(Entry1):
    type: Optional[Any] = None
    name: str
    entry: Entry


class EntryItemSpell(Entry1):
    type: Optional[Any] = None
    name: str
    entry: Entry


class EntryActions(BaseModel):
    type: Any
    name: str
    entries: List[Entry]


class EntryAttack(Entry1):
    type: Any
    attackType: AttackType
    attackEntries: List[Entry]
    hitEntries: List[Entry]


class EntryIngredient(Entry1):
    type: Any
    entry: Entry


class AlignItem(BaseModel):
    alignment: List[Align]
    chance: Optional[int] = None
    note: Optional[str] = None


class Align(BaseModel):
    __root__: Union[str, AlignItem, AlignItem1]


class ExternalSource(BaseModel):
    entry: Entry


class Save(BaseModel):
    str: Optional[str] = None
    dex: Optional[str] = None
    con: Optional[str] = None
    int: Optional[str] = None
    wis: Optional[str] = None
    cha: Optional[str] = None
    special: Optional[Entry] = Field(None, description="For use in homebrew.")


class Skill(BaseModel):
    acrobatics: Optional[str] = None
    animal_handling: Optional[str] = Field(None, alias="animal handling")
    arcana: Optional[str] = None
    athletics: Optional[str] = None
    deception: Optional[str] = None
    history: Optional[str] = None
    insight: Optional[str] = None
    intimidation: Optional[str] = None
    investigation: Optional[str] = None
    medicine: Optional[str] = None
    nature: Optional[str] = None
    perception: Optional[str] = None
    performance: Optional[str] = None
    persuasion: Optional[str] = None
    religion: Optional[str] = None
    sleight_of_hand: Optional[str] = Field(None, alias="sleight of hand")
    stealth: Optional[str] = None
    survival: Optional[str] = None
    other: Optional[List[OtherItem]] = None
    special: Optional[Entry] = Field(None, description="For use in homebrew.")


class Bonu(BaseModel):
    name: str
    entries: List[Entry]


class ReactionItem(BaseModel):
    name: str
    entries: List[Entry]


class MythicItem(BaseModel):
    name: Optional[str] = None
    entries: List[Entry]


class VariantItem(BaseModel):
    type: Optional[str] = None
    name: Optional[str] = None
    entries: Optional[List[Entry]] = None
    token: Optional[Token] = None
    variantSource: Optional[VariantSource1] = None


class CreatureData(BaseModel):
    name: Optional[str] = None
    shortName: Optional[Union[str, bool]] = None
    alias: Optional[List[str]] = None
    group: Optional[Optional[str]] = Field(
        None,
        description='A group name, indexed by search. E.g. searching "Lycanthrope" would otherwise fail to find anything',
    )
    level: Optional[int] = Field(
        None,
        description="Used in sidekicks, which can have levels (and generally do not have alignment)",
    )
    size: Optional[Size] = None
    sizeNote: Optional[str] = None
    type: Optional[Union[TypeItem, CreatureType]] = None
    source: Optional[str] = None
    otherSources: Optional[OtherSources1] = None
    externalSources: Optional[List[ExternalSource]] = Field(
        None, description="For homebrew use only."
    )
    alignment: Optional[List[Align]] = None
    ac: Optional[List[AcItem]] = None
    hp: Optional[Union[HpItem, HpItem1]] = None
    speed: Optional[Speed] = None
    str: Optional[int] = None
    dex: Optional[int] = None
    con: Optional[int] = None
    int: Optional[int] = None
    wis: Optional[int] = None
    cha: Optional[int] = None
    save: Optional[Save] = None
    skill: Optional[Skill] = None
    senses: Optional[Optional[List[str]]] = None
    passive: Optional[Union[int, str]] = None
    languages: Optional[Optional[List[str]]] = None
    pbNote: Optional[str] = None
    cr: Optional[Union[str, CrItem]] = None
    vulnerable: Optional[DamageVulnerabilityArray] = None
    resist: Optional[DamageResistArray] = None
    immune: Optional[DamageImmunityArray] = None
    conditionImmune: Optional[ConditionImmunityArray] = None
    spellcasting: Optional[Union[List[Any], Any]] = None
    trait: Optional[Union[List[Any], Any]] = None
    actionNote: Optional[str] = None
    action: Optional[Union[List[Any], Any]] = None
    bonus: Optional[List[Bonu]] = None
    reaction: Optional[List[ReactionItem]] = None
    legendaryGroup: Optional[LegendaryGroup] = None
    legendaryActions: Optional[float] = None
    legendaryHeader: Optional[List[Entry]] = None
    legendary: Optional[Union[List[Any], Any]] = None
    mythicHeader: Optional[List[Entry]] = None
    mythic: Optional[List[MythicItem]] = None
    variant: Optional[List[VariantItem]] = None
    page: Optional[int] = None
    familiar: Optional[bool] = None
    additionalSources: Optional[AdditionalSources] = None
    hasToken: Optional[bool] = None
    tokenUrl: Optional[str] = None
    altArt: Optional[List[AltArtItem]] = None
    fluff: Optional[Union[FluffObject, FluffItem]] = Field(
        None,
        description="This is intended to be used for Homebrew only - site data should include a fluff file per source",
    )
    isNamedCreature: Optional[bool] = None
    isNpc: Optional[bool] = Field(None, description="Used to flag adventure NPCs")
    environment: Optional[List[EnvironmentEnum]] = None
    soundClip: Optional[MediaHref] = None
    dragonCastingColor: Optional[DragonCastingColor] = None
    traitTags: Optional[List[TraitTag]] = None
    actionTags: Optional[List[ActionTag]] = None
    languageTags: Optional[List[LanguageTag]] = None
    senseTags: Optional[List[SenseTag]] = None
    spellcastingTags: Optional[List[SpellcastingTag]] = None
    damageTags: Optional[List[DamageTag]] = None
    miscTags: Optional[List[MiscTag]] = None
    conditionInflict: Optional[TagsConditions] = None
    conditionInflictLegendary: Optional[TagsConditions] = None
    conditionInflictSpell: Optional[TagsConditions] = None
    footer: Optional[List[Entry]] = Field(
        None, description="Intended for homebrew use only."
    )
    srd: Optional[Srd] = None
    _isCopy: Optional[bool] = Field(
        None,
        description='An internal flag indicating this creature is a copy of another, and is a temporary/placeholder entry which will be factored out using the "_copy" format at a later date.',
    )
    hasFluff: Optional[bool] = None
    hasFluffImages: Optional[bool] = None


class GenericFluffArrayItemData(BaseModel):
    name: Optional[str] = None
    source: Optional[str] = None
    images: Optional[Union[List[Any], Any]] = None
    entries: Optional[List[Entry]] = None


class FluffObject(BaseModel):
    entries: Optional[List[Entry]] = None
    images: Optional[List[EntryImage]] = None


class EntrySpellcasting(Entry1):
    type: Optional[Any] = None
    name: str
    headerEntries: Optional[List[Entry]] = None
    constant: Optional[_ArrayOfString] = None
    will: Optional[_ArrayOfString] = None
    ritual: Optional[_ArrayOfString] = None
    rest: Optional[EntrySpellcastingFrequency] = None
    daily: Optional[EntrySpellcastingFrequency] = None
    weekly: Optional[EntrySpellcastingFrequency] = None
    spells: Optional[Spells1] = None
    hidden: Optional[List[HiddenEnum]] = Field(
        None,
        description="Allows the above properties to be specified, but not rendered. Useful if e.g. a creature can only cast one spell, and this is rendered in the header line.",
    )
    footerEntries: Optional[List[Entry]] = None
    ability: Optional[Ability] = None


class SpellData(BaseModel):
    object_id: Optional[PyObjectId] = Field(alias="_id")
    name: Optional[str] = None
    level: Optional[int] = None
    school: Optional[School] = None
    subschools: Optional[List[str]] = Field(None, description="For homebrew use only.")
    meta: Optional[Meta] = None
    time: Optional[List[Time]] = None
    range: Optional[Range] = None
    components: Optional[Components] = None
    duration: Optional[List[Duration]] = None
    entries: Optional[List[Entry]] = None
    entriesHigherLevel: Optional[List[Entry]] = None
    classes: Optional[Classes] = None
    races: Optional[List[Race]] = None
    backgrounds: Optional[List[Background]] = None
    eldritchInvocations: Optional[List[EldritchInvocation]] = None
    source: Optional[str] = None
    page: Optional[int] = None
    otherSources: Optional[OtherSources1] = None
    damageInflict: Optional[List[DamageInflictEnum]] = None
    damageResist: Optional[List[DamageResistEnum]] = None
    damageImmune: Optional[List[DamageImmuneEnum]] = None
    damageVulnerable: Optional[List[DamageVulnerableEnum]] = None
    conditionInflict: Optional[TagsConditions] = None
    savingThrow: Optional[List[SavingThrowEnum]] = None
    abilityCheck: Optional[List[AbilityCheckEnum]] = None
    spellAttack: Optional[List[SpellAttackEnum]] = None
    areaTags: Optional[List[AreaTag]] = Field(
        None,
        description="By convention, only the effects of the spell cast at its base level are considered when populating these.",
    )
    miscTags: Optional[List[MiscTag1]] = Field(
        None,
        description="PRM = permanentEffects = 'Used to flag spells that can/will have permanent effects, but are not listed as having permanent duration'; SCL = scalingEffects; HL = isHeal; SMN = isSummon; SGT = requiresSight; THP = isTempHp; MAC = isModifiesAc; TP = isTeleport; FMV = isForcedMovement",
    )
    srd: Optional[Srd] = None
    scalingLevelDice: Optional[Union[List[Any], ScalingLevelDiceItem]] = None
    hasFluff: Optional[bool] = None
    hasFluffImages: Optional[bool] = None

    class Config:
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class EntryDataTrapHazard(BaseModel):
    type: Any
    dataTrapHazard: Union[Trap, Hazard]


class TrapItem(BaseModel):
    name: str
    trapHazType: TrapHazType
    source: str
    page: Optional[int] = None
    entries: List[Entry]
    srd: Optional[Srd] = None


class TrapItem1(BaseModel):
    name: str
    trapHazType: Any
    source: str
    page: Optional[int] = None
    entries: List[Entry]
    tier: Optional[conint(ge=1, le=4)] = None
    threat: conint(ge=1, le=3)
    trigger: List[Entry]
    effect: List[Entry]
    countermeasures: List[Entry]
    srd: Optional[Srd] = None


class TrapItem2(BaseModel):
    name: str
    trapHazType: Any
    source: str
    page: Optional[int] = None
    entries: List[Entry]
    tier: conint(ge=1, le=4)
    threat: conint(ge=1, le=3)
    trigger: List[Entry]
    initiative: conint(ge=1, le=3)
    initiativeNote: Optional[Entry] = None
    eActive: Optional[List[Entry]] = None
    eDynamic: Optional[List[Entry]] = None
    eConstant: Optional[List[Entry]] = None
    countermeasures: List[Entry]
    srd: Optional[Srd] = None


class Trap(BaseModel):
    __root__: Union[TrapItem, TrapItem1, TrapItem2]


class Hazard(BaseModel):
    name: str
    trapHazType: Optional[TrapHazType1] = None
    source: str
    page: Optional[int] = None
    entries: List[Entry]
    srd: Optional[Srd] = None


class EntryDataObject(BaseModel):
    type: Any
    dataObject: Object


class Object(BaseModel):
    name: str
    source: str
    page: Optional[int] = None
    size: str
    creatureType: Optional[CreatureType] = None
    objectType: ObjectType = Field(..., description="siege weapon; generic; unknown")
    str: Optional[int] = None
    dex: Optional[int] = None
    con: Optional[int] = None
    int: Optional[int] = None
    wis: Optional[int] = None
    cha: Optional[int] = None
    ac: Optional[str] = None
    hp: str
    speed: Optional[Speed] = None
    senses: Optional[List[str]] = None
    resist: Optional[DamageResistArray] = None
    conditionImmune: Optional[ConditionImmunityArray] = None
    immune: DamageImmunityArray
    vulnerable: Optional[DamageVulnerabilityArray] = None
    entries: Optional[List[Entry]] = None
    actionEntries: Optional[List[Entry]] = None
    tokenUrl: Optional[str] = None
    srd: Optional[Srd] = None
    isNpc: Optional[bool] = None
    hasToken: Optional[bool] = None


class ItemData(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    rarity: Optional[Rarity] = Field(
        None,
        description='"None" is for mundane items. "Unknown (Magic)" is for miscellaneous magical items. "Unknown" is for miscellaneous mundane items. "Varies" is for item groups.',
    )
    source: Optional[str] = None
    page: Optional[int] = None
    additionalSources: Optional[AdditionalSources] = None
    baseItem: Optional[str] = None
    ac: Optional[int] = None
    acSpecial: Optional[str] = Field(
        None, description="Free text field for homebrew use."
    )
    age: Optional[str] = None
    ammunition: Optional[bool] = None
    axe: Optional[bool] = None
    carryingCapacity: Optional[int] = None
    dmg1: Optional[str] = None
    dmg2: Optional[str] = None
    dmgType: Optional[str] = None
    entries: Optional[List[Entry]] = None
    additionalEntries: Optional[List[Entry]] = None
    property: Optional[List[PropertyEnum]] = None
    range: Optional[str] = None
    reload: Optional[str] = None
    reqAttune: Optional[Union[str, bool]] = None
    reqAttuneAlt: Optional[Union[str, bool]] = Field(
        None, description="Used for filtering."
    )
    curse: Optional[bool] = None
    vulnerable: Optional[DamageVulnerabilityArray] = None
    resist: Optional[DamageResistArray] = None
    immune: Optional[DamageImmunityArray] = None
    conditionImmune: Optional[ConditionImmunityArray] = None
    detail1: Optional[str] = None
    scfType: Optional[str] = None
    speed: Optional[int] = None
    stealth: Optional[bool] = None
    strength: Optional[Optional[str]] = None
    sword: Optional[bool] = None
    firearm: Optional[bool] = None
    staff: Optional[bool] = Field(
        None,
        description='Adds the italicized "Staff" text to the item info line (below the name).',
    )
    tier: Optional[str] = None
    value: Optional[float] = Field(None, description="In copper pieces.")
    currencyConversion: Optional[str] = Field(
        None, description="ID of a value conversion table. Homebrew only."
    )
    valueMult: Optional[float] = None
    weapon: Optional[bool] = None
    weaponCategory: Optional[str] = None
    weight: Optional[float] = None
    weightMult: Optional[float] = None
    weightNote: Optional[str] = None
    wondrous: Optional[bool] = None
    tattoo: Optional[bool] = None
    sentient: Optional[bool] = None
    poison: Optional[bool] = None
    poisonTypes: Optional[List[PoisonType]] = None
    crew: Optional[int] = None
    crewMin: Optional[int] = Field(
        None, description="For crews specified as an X-Y min-max."
    )
    crewMax: Optional[int] = Field(
        None, description="For crews specified as an X-Y min-max."
    )
    capPassenger: Optional[int] = None
    capCargo: Optional[float] = None
    vehSpeed: Optional[float] = None
    vehAc: Optional[int] = None
    vehHp: Optional[int] = None
    vehDmgThresh: Optional[int] = None
    travelCost: Optional[int] = Field(
        None, description="In copper pieces per mile per passenger."
    )
    shippingCost: Optional[int] = Field(
        None, description="In copper pieces per 100 lbs per mile."
    )
    charges: Optional[Union[str, int]] = None
    recharge: Optional[Recharge] = None
    attachedSpells: Optional[List[str]] = None
    items: Optional[List[str]] = Field(
        None, description="This is required for itemGroup entries."
    )
    ability: Optional[Ability1] = Field(
        None, description="Item ability score adjustments."
    )
    focus: Optional[Union[bool, List[Any]]] = Field(
        None, description="Item can be used as a spellcasting focus"
    )
    lootTables: Optional[List[str]] = None
    alCertificateId: Optional[str] = Field(
        None, description="Adventurers League item certificate ID; for use in homebrew."
    )
    bonusAc: Optional[str] = None
    bonusWeapon: Optional[str] = None
    bonusWeaponAttack: Optional[str] = None
    bonusWeaponDamage: Optional[str] = None
    bonusSpellAttack: Optional[str] = None
    bonusSpellSaveDc: Optional[str] = None
    bonusSavingThrow: Optional[str] = None
    bonusAbilityCheck: Optional[str] = None
    bonusProficiencyBonus: Optional[str] = None
    otherSources: Optional[OtherSources1] = None
    srd: Optional[Srd] = None
    packContents: Optional[List[Union[str, PackContent, PackContent1]]] = None
    atomicPackContents: Optional[bool] = Field(
        None,
        description="If the item's pack contents should be treated as one atomic unit, rather than handled as individual sub-items.",
    )
    containerCapacity: Optional[ContainerCapacity] = None
    ammoType: Optional[str] = None
    grantsProficiency: Optional[bool] = None
    hasFluff: Optional[bool] = None
    hasFluffImages: Optional[bool] = None
    hasRefs: Optional[bool] = None


class DataDamImmuneItem1(BaseModel):
    preNote: Optional[str] = None
    immune: List[DataDamImmune]
    note: Optional[str] = None


class DataDamImmune(BaseModel):
    __root__: Union[DataDamageType, DataDamImmuneItem, DataDamImmuneItem1]


PrerequisiteItem.update_forward_refs()
Entry.update_forward_refs()
EntryTable.update_forward_refs()
AlignItem.update_forward_refs()
CreatureData.update_forward_refs()
EntryDataTrapHazard.update_forward_refs()
EntryDataObject.update_forward_refs()
DataDamImmuneItem1.update_forward_refs()
SpellData.update_forward_refs()
